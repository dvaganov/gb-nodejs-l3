'use strict'

const http = require('http');
const mvc = require('./');

class Application {
    constructor(config) {
        // Private properties
        this._router = null;
        this._view = null;
        this._response = null;
        this._inProcess = false;

        // Public properties
        this.baseDir = '';
        this.headers = {'Content-Type' : 'text/html'};
        this.statusCode = 200;
        this.body = '';

        // Setup application
        this._setup(config);
        this._router = new mvc.Router();
        this._view = new mvc.View(this);
    }

    get routes() {
        return this._router.routes;
    }

    set routes(value) {
        this._router.routes = value;
    }

    render(view, data) {
        this._view.generate(view, data);
    }

    run(port) {
        http.createServer(this._onRequest.bind(this))
            .listen(port);
    }

    send() {
        this._response.writeHead(this.statusCode, this.headers);
        this._response.write(this.body);
        this._response.end();
        return this;
    }

    _setup(value) {
        if (typeof value !== 'object')
            throw new Error('Config is not an object');

        for (let field in value) {
            this[field] = value[field];
        }
    }

    _onRequest(request, response) {
        this._response = response;

        let route = {controller: 'Site', action: 'error'},
            controller = null;

        // Trying find controller
        try {
            route = this._router.route(request.url, request.method);
        } catch (err) {
            console.log(err.toString());
        }

        // Trying create controller
        try {
            let controllerName = route.controller.charAt(0).toUpperCase() + route.controller.slice(1);
            let controllerClass = require(`${this.baseDir}/controllers/${controllerName}Controller.js`);
            controller = new controllerClass().init(this, route.query);
        } catch (err) {
            console.log(err.toString());
        }

        // Trying run controller
        try {
            controller.run(route.action);
        } catch (err) {
            console.log(err.toString());
        }

        this._inProcess = true;
    }
}

module.exports = Application;
